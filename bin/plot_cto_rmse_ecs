#!/usr/bin/env python3
'''Plot scatter plot of RMSE of the geographical distribution of cloud type
occurrence and sensitivity indicators (ECS, TCR and cloud feedback).

Usage: plot_cto_rmse_ecs <input> <ecs> <output> [legend: <legend>]

Depends on: calc_geo_cto | calc_cto

Arguments:

- input: Input directory - the output of calc_geo_cto or calc_cto (NetCDF).
- ecs: ECS file (CSV).
- output: Output plot (PDF).

Options:

- legend: Plot legend ("true" or "false"). Default: "true".

Examples:

bin/plot_cto_rmse_ecs data/geo_cto/historical/all input/ecs/ecs.csv plot/geo_cto_rmse_ecs.pdf
'''

import sys
import scipy
import os
import numpy as np
import ds_format as ds
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.patches as mpatches
import matplotlib.text as mtext
from matplotlib.lines import Line2D
from matplotlib.legend_handler import HandlerPatch
import pandas as pd
import pymc3 as pm
import pst
import scipy as sp
import statsmodels.stats.weightstats

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=7)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

NBURN = 1000
NSAMPLES = 10000
NCHAINS = 24
NCORES = 24

class Handle:
    def __init__(self, text, color):
        self.text = text
        self.color = color

class HandlerCircle(HandlerPatch):
    def legend_artist(self, legend, orig_handle, fontsize, handlebox):
        x0, y0 = handlebox.xdescent, handlebox.ydescent
        w, h = handlebox.width, handlebox.height
        r = 5
        p1 = mpatches.Circle((x0 + r/2 + w/2, y0 + r/2), r,
            facecolor=orig_handle.color,
			linewidth=0,
            transform=handlebox.get_transform()
        )
        p2 = mtext.Text(x0 + w/2 + r/2, y0 + r/2, orig_handle.text,
            color='k',
            fontsize=7,
            horizontalalignment='center',
            verticalalignment='center',
            transform=handlebox.get_transform()
        )
        handlebox.add_artist(p1)
        handlebox.add_artist(p2)
        return (p1, p2)

def bayes(x, y, nsamples=NSAMPLES, nburn=NBURN, nchains=NCHAINS, ncores=NCORES):
	x_m = np.mean(x)
	x_sd = np.std(x)
	y_m = np.mean(y)
	y_sd = np.std(y)
	xn = (x - x_m)/x_sd
	yn = (y - y_m)/y_sd

	with pm.Model() as model:
		model_sel = pm.DiscreteUniform('model_sel', lower=0, upper=1)
		c0 = pm.Uniform('c0', lower=-100, upper=100)
		c1ang = pm.Uniform('c1ang', lower=-np.pi/2, upper=np.pi/2)
		mu = c0 + model_sel*np.tan(c1ang)*xn
		sd = pm.Uniform('sd', lower=0, upper=100)
		obs = pm.Cauchy('obs', mu, sd, observed=yn)

	with model:
		step = pm.Metropolis()
		trace = pm.sample(nsamples + nburn, step, chains=nchains, cores=ncores, progressbar=True)
		c0 = trace['c0'][(nburn*nchains):]
		c1ang = trace['c1ang'][(nburn*nchains):]
		c1 = np.tan(c1ang)
		sd = trace['sd'][(nburn*nchains):]
		model_sel = trace['model_sel'][(nburn*nchains):]
		mask = model_sel == 1
		c0 = c0[mask]
		c1 = c1[mask]
		sd = sd[mask]
		print('BF = %f' % (np.mean(model_sel)/(1-np.mean(model_sel))))
		return \
			c0*y_sd + y_m - c1*y_sd/x_sd*x_m, \
			c1*y_sd/x_sd, \
			sd*y_sd, \
			(np.mean(model_sel)/(1-np.mean(model_sel)))

def read_ecs(filename, var):
	var_u = var.upper()
	d = pd.read_csv(filename)
	return {
		'model': np.array(d['Model']),
		'ecs': np.array(d['ECS']),
		'tcr': np.array(d['TCR']),
		'cld': np.array(d['CLD']),
		'ext': np.array(d['Extended_'+var_u] == 'Y'),
		'.': {
			'model': {'.dims': ['model']},
			'ecs': {'.dims': ['model']},
			'tcr': {'.dims': ['model']},
			'cld': {'.dims': ['model']},
			'ext': {'.dims': ['model']},
		}
	}

def read_geo_cto(dirname):
	dd = ds.readdir(input_)

	d_ceres = None
	for i, d in enumerate(dd):
		model0 = os.path.basename(d['filename'])[:-3]
		if model0 == 'CERES':
			d_ceres = d

	model = []
	rmse = []
	ecs = []

	for i, d in enumerate(dd):
		model0 = os.path.basename(d['filename'])[:-3]
		if model0 == 'CERES':
			continue
		mse = 0
		nclasses = d['cloud_occurrence'].shape[0]
		for j in range(nclasses):
			if 'stats_geo' in d:
				co = d['stats_geo'][0,j,:,:]
			else:
				co = d['cloud_occurrence'][j,:,:]
			if 'stats_geo' in d_ceres:
				co_ceres = d_ceres['stats_geo'][0,j,:,:]
			else:
				co_ceres = d_ceres['cloud_occurrence'][j,:,:]
			z = (co - co_ceres)*100.
			weights = np.cos(d['lat']/180.*np.pi)
			mse += np.mean(np.average(z**2, weights=weights, axis=0))
		mse /= nclasses
		rmse0 = np.sqrt(mse)

		model += [model0]
		rmse += [rmse0]

	return {
		'model': model,
		'rmse': np.array(rmse),
	}

def read_cto(filename):
	print('<- %s' % filename)
	d = ds.read(filename)
	n = len(d['models'])

	for i in range(n):
		if d['models'][i] == 'CERES':
			stats_ceres = d['stats'][i]

	model = []
	rmse = []
	for i in range(n):
		if d['models'][i] == 'CERES':
			continue
		model0 = d['models'][i]
		rmse0 = np.sqrt(np.mean((100*(d['stats'][i] - stats_ceres))**2))
		model += [model0]
		rmse += [rmse0]

	return {
		'model': model,
		'rmse': np.array(rmse),
	}

def plot(d, ecs, var):
	print('<- %s' % ecs)
	d_ecs = read_ecs(ecs, var)

	n = len(d['model'])

	ecs = []
	cmap = plt.get_cmap('tab20')
	handles= []
	labels = []
	j = 0
	for i in range(n):
		if d['model'][i] in list(d_ecs['model']):
			ecs0 = d_ecs[var][d_ecs['model'] == d['model'][i]][0]
			ext = d_ecs['ext'][d_ecs['model'] == d['model'][i]][0]
			if not ext:
				label = d['model'][i]
			else:
				label = d['model'][i] + '$^*$'
			plt.scatter(d['rmse'][i], ecs0, label=label, color=cmap(j), s=80)
			labels += [label]
			handles += [Handle('%d' % (j + 1), cmap(j))]
			plt.text(d['rmse'][i], ecs0, j + 1,
				fontsize=7,
				va='center',
				ha='center',
			)
			j += 1
		else:
			ecs0 = np.nan
		ecs += [ecs0]
	ecs = np.array(ecs)

	mask = np.isfinite(d['rmse']) & np.isfinite(ecs)
	c0, c1, sd, bf = bayes(d['rmse'][mask], ecs[mask])
	res = sp.stats.linregress(d['rmse'][mask], ecs[mask])
	ph0 = 1/(1 + bf)
	rho = np.corrcoef(d['rmse'][mask], ecs[mask])[0,1]
	a1, a2 = np.nanpercentile(c1, [2.5, 97.5])
	if rho > 0:
		sign = '<'
		pa0 = np.nansum(c1 < 0)/np.sum(np.isfinite(c1))
	else:
		sign = '>'
		pa0 = np.nansum(c1 > 0)/np.sum(np.isfinite(c1))
	order = np.argsort(ecs[mask])
	n = int(np.round(len(order)/2))
	x1 = d['rmse'][mask][order[:n]]
	y1 = ecs[mask][order[:n]]
	x2 = d['rmse'][mask][order[n:]]
	y2 = ecs[mask][order[n:]]
	_, pz = statsmodels.stats.weightstats.ztest(x1, x2)
	plt.text(1 - 0.36, 1 - 0.29,
		'P(H$_0$) = %.0e\nR$^2$ = %.2f\n$\\rho$ = %.2f\n$\\alpha_{95}$ = (%.2f, %.2f)\nP($\\alpha$ %s 0) = %.0e\np$_z$ = %.0e' % \
		(ph0, res.rvalue**2, rho, a1, a2, sign, pa0, pz),
		transform=plt.gca().transAxes,
		bbox=dict(facecolor='#eeeeee', edgecolor='none'),
	)
	sd_m = np.mean(sd)
	xlim = list(plt.xlim())
	xlim[0] = np.floor(xlim[0])
	xlim[1] = np.ceil(xlim[1] + (xlim[1] - xlim[0])*0.3)
	plt.xlim(xlim)
	ylim = {
		'ecs': [1.5, 6],
		'tcr': [1.2, 3],
		'cld': [-0.3, 1.1],
	}[var]
	plt.ylim(ylim)
	xlim = plt.xlim()
	x = np.linspace(xlim[0], xlim[1], 1000)
	c0_m = np.mean(c0)
	c1_m = np.mean(c1)
	n = len(x)
	yl = np.full(n, np.nan, np.float64)
	yh = np.full(n, np.nan, np.float64)
	s = np.mean([sp.stats.cauchy.ppf(0.84, 0, sd1) for sd1 in sd])
	for i in range(n):
		yy = c0_m + c1_m*x[i]
		yl[i] = yy - s
		yh[i] = yy + s
	plt.fill_between(x, yl, yh, color='#00000020', edgecolor='none')
	plt.plot(x, c0_m + c1_m*x, linestyle='dashed', color='k', lw=0.5)
	plt.gca().set_aspect(1.0/plt.gca().get_data_ratio(), adjustable='box')

	plt.xlabel('Cloud type occurrence RMSE (%)')
	units = 'K' if var != 'cld' else 'Wm$^{-2}$K$^{-1}$'
	label = {
		'ecs': 'ECS',
		'tcr': 'TCR',
		'cld': 'Cloud feedback',
	}[var]
	plt.ylabel('%s (%s)' % (label, units))
	pos = plt.gca().get_position()
	return handles, labels, pos

if __name__ == '__main__':
	args, opts = pst.decode_argv(sys.argv, as_unicode=True)
	if len(args) != 4:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = args[1]
	ecs = args[2]
	output = args[3]

	print('<- %s' % input_)
	if os.path.isdir(input_):
		d = read_geo_cto(input_)
	else:
		d = read_cto(input_)

	fig = plt.figure(figsize=(10, 10))
	x = None
	y = None
	for i, var in enumerate(['ecs', 'tcr', 'cld']):
		plt.subplot(2, 2, i + 1)
		handles, labels, pos = plot(d, ecs, var)
		if i == 1: x = pos.x0
		if i == 2: y = pos.y0 + pos.height
	if opts.get('legend', True):
		plt.legend(handles, labels,
			handler_map={Handle: HandlerCircle()},
			bbox_transform=fig.transFigure,
			bbox_to_anchor=[x, y],
			loc='upper left',
		)
	plt.subplots_adjust(wspace=0.15, hspace=0.15)
	plt.savefig(output, bbox_inches='tight')
