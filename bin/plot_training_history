#!/usr/bin/env python3
'''Plot training history loss function.

Usage: plot_history <input> <output>

Depends on: tf

Arguments:

- input: Input history file - the output of tf (NetCDF).
- output: Output plot (PDF).

Examples:

bin/plot_training_history data/ann/history.nc plot/training_history.pdf
'''

import sys
import numpy as np
import ds_format as ds
import matplotlib.pyplot as plt
import matplotlib as mpl

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

COLORS = ['#0084C8', '#DC0000', '#009100', '#FFC022']

if __name__ == '__main__':
	if len(sys.argv) != 3:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = sys.argv[1]
	output = sys.argv[2]
	d = ds.read(input_)
	plt.figure(figsize=(4, 6))
	x = np.arange(0, len(d['loss']))
	xticks = np.arange(0, len(d['loss']), 2)
	plt.subplot(2, 1, 1)
	plt.plot(x, np.sqrt(d['loss'])*100, label='Training set loss function',
		color=COLORS[0], linestyle='solid')
	plt.plot(x, np.sqrt(d['val_loss'])*100, label='Validation set loss function',
		color=COLORS[1], linestyle='dashed')
	plt.legend()
	plt.ylabel('Root mean square error (%)')
	plt.ylim(0, 12)
	plt.xlim(1, len(d['loss']) - 1)
	plt.xticks(xticks)
	plt.title('Training phase history')
	plt.xlabel('Training iteration number')
	plt.subplot(2, 1, 2)
	plt.bar(np.arange(5)-0.15, list(d['rmse_rnd']) + [d['rmse_rnd_total']],
		width=0.3, color=COLORS[1], label='Uninformative predictor',
		hatch='///', alpha=0.999)
	plt.bar(np.arange(5)+0.15, list(d['rmse_pred']) + [d['rmse_pred_total']],
		width=0.3, color=COLORS[0], label='ANN predictor', hatch='---',
		alpha=0.999)
	plt.ylim(0, 20)
	plt.ylabel('Root mean square error (%)')
	plt.title('Validation results')
	for i in range(5):
		plt.text(
			(np.arange(5)-0.15)[i],
			0.5,
			[
				'%d' % x
				for x in np.round(list(d['rmse_rnd']) + [d['rmse_rnd_total']])
			][i],
			ha='center',
			color='white',
			fontsize=8,
			weight='bold',
		)
	for i in range(5):
		plt.text(
			(np.arange(5)+0.15)[i],
			0.5,
			[
				'%d' % x
				for x in np.round(list(d['rmse_pred']) + [d['rmse_pred_total']])
			][i],
			ha='center',
			color='white',
			fontsize=8,
			weight='bold',
		)

	plt.gca().set_xticklabels(['', 'High', 'Middle', 'Cumuliform', 'Stratiform', 'Total'], rotation=90)
	plt.legend()
	plt.subplots_adjust(hspace=0.40)
	plt.savefig(output, bbox_inches='tight')
