#!/usr/bin/env python3
'''Plot cloud type occurrence vs. ECS regression.

Usage: plot_cto_ecs <varname> <input> <summary> <output>

Depends on: calc_cto calc_cto_ecs

Arguments:

- varname: Variable name. One of: "ecs" (ECS), "tcr" (TCR), "cld" (cloud
  feedback).
- input: Input file - the output of calc_cto (NetCDF).
- summary: Input file - the output of calc_cto_ecs (NetCDF).
- output: Output plot (PDF).

Examples:

bin/plot_cto_ecs ecs data/cto/abrupt-4xCO2_1850-1949.nc data/cto_ecs/abrupt-4xCO2_1850_1949.nc plot/cto_ecs_abrupt-4xCO2.pdf ''
'''

import sys
import os
import matplotlib.pyplot as plt
import matplotlib as mpl
import ds_format as ds
import numpy as np
import aquarius_time as aq
import pandas as pd
import pymc3 as pm
import pst
import scipy as sp

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

COLORS = ['#0084C8', '#DC0000', '#009100', '#FFC022']
LABELS = {
	'ecs': 'ECS (K)',
	'tcr': 'TCR (K)',
	'cld': 'Cloud feedback (Wm$^{-2}$K$^{-1}$)',
}
CLOUD_TYPES = ['High', 'Middle', 'Cumuliform', 'Stratiform']

if __name__ == '__main__':
	args, opts = pst.decode_argv(sys.argv, as_unicode=True)
	if len(args) != 5:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	varname = args[1]
	input_ = args[2]
	summary = args[3]
	output = args[4]

	if varname not in ('ecs', 'tcr', 'cld'):
		raise ValueError('Invalid varname "%s"' % varname)

	plt.figure(figsize=[6, 5])

	print('<- %s' % input_)
	d = ds.read(input_)
	d_summary = ds.read(summary)

	var = d_summary[varname]

	res = 0
	for i, cloud_type in enumerate(['Hi', 'Mi', 'Cu', 'St']):
		#ref = d['stats_tas'][i_ceres,i]
		plt.scatter(
			(d['stats_tas'][:,i])*100,
			#d['stats_tas'][:,i]*100,
			var,
			s=20,
			color=COLORS[i]
		)
		x = np.linspace(-2, 2, 200)
		y = np.full(len(x), np.nan)
		ylow = np.full(len(x), np.nan)
		yhigh = np.full(len(x), np.nan)
		s = np.mean([sp.stats.cauchy.ppf(0.84, 0, sd) for sd in d_summary['sd_'+varname+'_samples'][i]])
		for j in range(len(x)):
			#u = d_summary['c1_'+varname+'_samples'][i,:]*x[j] + \
			#	d_summary['c0_'+varname+'_samples'][i,:] + \
			#	d_summary['err'+varname+'_samples'][i,:]
			y[j] = d_summary['c1_'+varname][i]*x[j] + d_summary['c0_'+varname][i]
			#y[j] = np.mean(u)
			#ylow[j] = np.percentile(u, (100-68)/2)
			#yhigh[j] = np.percentile(u, 100-(100-68)/2)
			ylow[j] = y[j] - s
			yhigh[j] = y[j] + s
		plt.fill_between(x, ylow, yhigh, color=COLORS[i], alpha=0.1, edgecolor='none')
		plt.plot(x, y, color=COLORS[i], lw=0.8, label=CLOUD_TYPES[i])
		#res += d['c1'][i]*ref*100
		#print(d['c1'][i]*ref*100)
		#plt.axvline(d['stats_tas'][i_ceres,i]*100, linestyle='dashed', color=COLORS[i], lw=1)
	plt.xlim(-0.6, 0.4)
	if varname == 'ecs':
		plt.ylim(1, 6)
		plt.yticks(np.arange(1, 7, 1))
	elif varname == 'tcr':
		plt.ylim(1, 3)
	elif varname == 'cld':
		plt.ylim(-0.2, 0.9)
	plt.xlabel('Cloud type occurrence change (% K$^{-1}$)')
	plt.ylabel(LABELS[varname])
	plt.legend(loc='lower center', fontsize=8)
	plt.gca().set_aspect(1.0/plt.gca().get_data_ratio(), adjustable='box')
	print('-> %s' % output)
	plt.savefig(output, bbox_inches='tight')
