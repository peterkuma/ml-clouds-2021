#!/usr/bin/env python3
'''Plot global mean cloud type occurrence.

Usage: plot_cto <varname> <degree> <absrel> <regression> <input> <ecs> <output> <title> [legend: <legend>]

Depends on: calc_cto

Arguments:

- varname: Variable name. One of: "ecs" (ECS), "tcr" (TCR), "cld" (cloud
  feedback).
- degree: One of: "0" (mean), "1-time" (trend in time), "1-tas" (trend in tas).
- absrel: One of "absolute" (absolute value), "relative" (relative to CERES).
- regression: Plot regression. One of: true or false.
- input: Input directoy - the output of calc_geo_cto (NetCDF).
- ecs: ECS file (CSV).
- output: Output plot (PDF).
- title: Plot title.

Options:

- legend: Show legend ("true" or "false"). Default: "true".

Examples:

bin/plot_cto ecs 0 relative false data/geo_cto/historical/ input/ecs/ecs.csv plot/cto_historical.pdf 'CMIP6 historical (2003-2014) and reanalyses (2003-2020) relative to CERES (2003-2020)'
bin/plot_cto ecs 1-tas absolute false data/geo_cto/abrupt-4xCO2/ input/ecs/ecs.csv plot/cto_abrupt-4xCO2.pdf 'CMIP abrupt-4xCO2 (first 100 years)'
'''

import sys
import os
import matplotlib.pyplot as plt
import matplotlib as mpl
import ds_format as ds
import numpy as np
import aquarius_time as aq
import pandas as pd
import pymc3 as pm
import pst
import pandas as pd
import statsmodels.stats.weightstats

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
#mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

COLORS0 = ['#0084C8', '#DC0000', '#009100', '#FFC022']
COLORS1 = plt.get_cmap('tab10')(range(0, 11))

LABELS = {
	'ecs': 'ECS (K)',
	'tcr': 'TCR (K)',
	'cld': 'Cloud feedback (Wm$^{-2}$K$^{-1}$)',
}

CLOUD_TYPES0 = ['High', 'Middle', 'Cumuliform', 'Stratiform']
CLOUD_TYPES1 = ['Ci', 'Cs', 'Cc', 'As', 'Ac', 'Cu', 'Sc', 'St', 'Cu+Sc', 'Cb']
CLOUD_TYPES2 = [
	'Cirrus fibratus/uncinus (H1)',
	'Cirrus spissatus (H2)',
	'Cirrus spissatus cumulonimbogenitus (H3)',
	'Cirrus fibratus/uncinus (H4)',
	'Cirrus/cirrostratus (H5)',
	'Cirrus/cirrostratus (H6)',
	'Cirrostratus whole sky (H7)',
	'Cirrostratus not whole sky (H8)',
	'Cirrocumulus (H9)',
	'Cumulonimbus capillatus (M1)',
	'Altostratus opacus/nimbostratus (M2)',
	'Altocumulus translucidus single level (M3)',
	'Altocumulus translucidus patches (M4)',
	'Altocumulus translucidus bands (M5)',
	'Altocumulus cumulogenitus (M6)',
	'Altocumulus translucidus/opacus (M7)',
	'Altocumulus castellanus/floccus (M8)',
	'Altocumulus chaotic sky (M9)',
	'Cumulus humilis/fractus (L1)',
	'Cumulus mediocris/congestus (L2)',
	'Cumulonimbus calvus (L3)',
	'Stratocumulus cumulogenitus (L4)',
	'Stratocumulus (L5)',
	'Stratus nebulosus/fractus (L6)',
	'Stratus/cumulus fractus (L7)',
	'Cumulus and stratocumulus (L8)',
	'Cumulonimbus capillatus (L9)',
]

for i, cloud_type in enumerate(CLOUD_TYPES2):
	CLOUD_TYPES2[i] = cloud_type[-3:-1] + ' ' + cloud_type[0:-5]

HATCH = [
	'///',
	'---',
	'\\\\\\',
	'...',
]

LABELS0 = None
LABELS1 = list(CLOUD_TYPES1)
LABELS1[-2] = 'CS'
LABELS2 = ['%s%s' % (l, i) for l in ['H', 'M', 'L'] for i in range(1, 10)]

SYMBOLS = ['.', ':', ',', ';', '!', ')', '(', ']', '[', '{']

def read_ecs(filename):
	d = pd.read_csv(filename)
	return {
		'model': np.array(d['Model']),
		'ecs': np.array(d['ECS']),
		'tcr': np.array(d['TCR']),
		'cld': np.array(d['CLD']),
		'ext_ecs': np.array(d['Extended_ECS'].astype(str)),
		'ext_tcr': np.array(d['Extended_TCR'].astype(str)),
		'ext_cld': np.array(d['Extended_CLD'].astype(str)),
		'.': {
			'model': {'.dims': ['model']},
			'ecs': {'.dims': ['model']},
			'tcr': {'.dims': ['model']},
			'cld': {'.dims': ['model']},
			'ext_ecs': {'.dims': ['model']},
			'ext_tcr': {'.dims': ['model']},
			'ext_cld': {'.dims': ['model']},
		}
	}

def get_ecs(d_ecs, var, model):
	try:
		i = np.where(d_ecs['model'] == model)[0][0]
		return d_ecs[var][i], (d_ecs['ext_'+var][i] == 'Y')
	except IndexError:
		return None, None

def geomean(x, lat, lon):
	w = np.cos(lat/180*np.pi)
	w /= np.sum(w)
	return np.mean(np.average(x[:,:], weights=w, axis=0), axis=0)

if __name__ == '__main__':
	args, opts = pst.decode_argv(sys.argv, as_unicode=True)
	if len(args) != 9:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	varname = args[1]
	degree = args[2]
	absrel = args[3]
	regression = args[4]
	input_ = args[5]
	ecs = args[6]
	output = args[7]
	title = args[8]

	if varname not in ('ecs', 'tcr', 'cld'):
		raise ValueError('Invalid varname "%s"' % varname)

	if degree == 0:
		key = 'cloud_occurrence'
		suptitle = 'Cloud type occurrence'
		if absrel == 'relative':
			ylabel = 'Cloud type occurrence relative to CERES (%)'
		else:
			ylabel = 'Cloud type occurrence (%)'
		ylabel_pos = [-0.04, 0.55]
	elif degree == '1-time':
		key = 'stats_time'
		suptitle = 'Cloud type occurrence trend'
		ylabel = 'Cloud type occurrence change trend (%/100 yr)'
	elif degree == '1-tas':
		key = 'cloud_occurrence_tas'
		suptitle = 'Cloud type occurrence change with respect to GMST'
		ylabel = 'Cloud type occurrence change with respect to GMST (% K$^{-1}$)'
		ylabel_pos = [-0.04, 0.55]
	else:
		raise ValueError('Invalid degree "%s"' % degree)

	rel_label = ' relative to CERES' if absrel == 'relative' else ''
	suptitle += rel_label

	print('<- %s' % input_)
	dd = ds.readdir(input_, [
		key,
		'lon',
		'lat',
	])
	nclasses = ds.dim(dd[0], 'cloud_type')

	COLORS = COLORS0 if nclasses == 4 else COLORS1

	ylabel_pos = None

	cloud_types = {
		4: CLOUD_TYPES0,
		10: CLOUD_TYPES1,
		27: CLOUD_TYPES2,
	}[nclasses]

	labels = {
		4: LABELS0,
		10: LABELS1,
		27: LABELS2,
	}[nclasses]

	d = ds.merge(dd, 'model')
	d['models'] = np.array([os.path.basename(x)[:-3] for x in d['filename']])

	print('<- %s' % ecs)
	d_ecs = read_ecs(ecs)

	ds.select(d_ecs, {'model': np.isfinite(d_ecs['ecs'])})

	ecs_order = np.argsort(d_ecs['ecs'])
	ecs_order = ['CERES'] + list(d_ecs['model'][ecs_order])

	order = []
	for model in ecs_order:
		try:
			i = np.where(d['models'] == model)[0][0]
			order += [i]
		except IndexError:
			pass
	print(order)
	print(len(d['models']))
	order = list(np.array(order))
	for i, model in enumerate(d['models']):
		if model not in ecs_order:
			order += [i]

	for name in ds.get_vars(d):
		d[name] = d[name][order]

	try:
		i_ceres = np.argwhere(d['models'] == 'CERES')[0][0]
	except IndexError:
		i_ceres = None

	if absrel == 'relative' and i_ceres is None:
		raise ValueError('Cannot plot relative values without CERES')

	if absrel == 'relative':
		mask = d['models'] != 'CERES'
	else:
		mask = np.ones(len(d['models']), bool)

	n, m = d[key].shape[0:2]
	x = np.full((n, m), np.nan, np.float64)
	for i, model in enumerate(d['models']):
		for j in range(m):
			x[i,j] = geomean(d[key][i,j], d['lat'][i], d['lon'][i])
	d[key] = x

	mask &= np.isfinite(d[key][:,0])

	nrow = 1
	if regression:
		ncol = 2
	else:
		ncol = 1

	w = {
		4: 10,
		10: 10,
		27: 12,
	}[nclasses]

	plt.figure(figsize=[w + (3.0 if nclasses == 27 else 0.7), 4 + 2])
	plt.subplot(nrow, ncol, 1)

	if degree == 0:
		if absrel == 'relative':
			yticks = np.arange(-24, 24, 2)
			if nclasses == 4:
				plt.ylim([-22, 6])
			elif nclasses == 10:
				plt.ylim([-12, 5])
			else:
				plt.ylim([-8, 7])
			ylim = plt.ylim()
			plt.yticks(yticks[(yticks >= ylim[0]) & (yticks <= ylim[1])][1:])
		else:
			plt.ylim([0, 60])
	elif degree == '1-time':
		plt.ylim([-3, 3])
	elif degree == '1-tas':
		if nclasses == 4:
			plt.ylim([-0.7, 0.4])
		elif nclasses == 10:
			plt.ylim([-0.45, 0.4])
		else:
			plt.ylim([-0.25, 0.3])
	ylim = plt.gca().get_ylim()
	plt.xlim(-0.4, np.sum(mask) - 0.6)

	pz = np.full(len(cloud_types), np.nan, float)

	for i, cloud_type in enumerate(cloud_types):
		h = d[key][mask,i]
		x = np.arange(len(h), dtype=np.float64)
		width = 0.2*4/len(cloud_types)
		x[:] += i*width - width*len(cloud_types)/2 + width/2
		if absrel == 'relative':
			h -= d[key][i_ceres,i]
		hatch = (HATCH[i] if nclasses == 4 else None),
		color = (COLORS[i % 9] if nclasses == 27 else COLORS[i]),
		if nclasses == 4:
			label = cloud_type
		elif nclasses == 10:
			label = '%s %s' % (SYMBOLS[i], cloud_type)
		else:
			label = '%s %s' % (SYMBOLS[i % 9], cloud_type)
		plt.bar(x, h*100.,
			width=width,
			hatch=hatch,
			alpha=0.999,
			label=label,
			color=color,
		)
		n = int((len(h) - 2)/2)
		_, pz[i] = statsmodels.stats.weightstats.ztest(h[:n], h[n:-2])
		ylim = plt.ylim()
		dy = ylim[1] - ylim[0]
		if nclasses == 27 and i % 9 == 0:
			label = ['H', 'M', 'L'][i//9]
			for xi in x:
				plt.text(xi + width*4.5, plt.ylim()[1] - dy*0.01, label,
					ha='center',
					va='top',
					fontsize=8,
				)
		if nclasses == 27 and i in (9, 18):
			for xi in x:
				plt.axvline(xi - width/2, lw=0.5, color='k', alpha=0.5)
		if nclasses in (10, 27):
			for j in range(len(x)):
				symbol = SYMBOLS[i % 9] if nclasses == 27 else SYMBOLS[i]
				plt.text(x[j], h[j]*100, symbol,
					ha='center',
					va=('bottom' if h[j] > 0 else 'top'),
					fontsize=8,
				)
		if (key+'_samples') in d:
			h_samples = d[key+'_samples'][mask,i,:]
			if absrel == 'relative':
				h_samples -= d[key+'_samples'][i_ceres,i,:]
			hlow = h - np.percentile(h_samples, 16, axis=1)
			hhigh = np.percentile(h_samples, 84, axis=1) - h
			herr = np.stack([hlow,hhigh])
			plt.errorbar(x, h*100., herr*100.,
				ecolor='k',
				elinewidth=0.5,
				linestyle='none',
				capsize=1
			)
		plt.ylabel(ylabel)
		if ylabel_pos is not None:
			plt.gca().yaxis.set_label_coords(*ylabel_pos)
		rotated = len(d['models'][mask]) > 12
		plt.xticks(range(len(h)), [m for m in d['models'][mask]],
			fontsize=8,
			rotation=(45 if rotated else None),
			ha=('right' if rotated else 'center'),
		)

	if nclasses <= 10:
		plt.text(0.01, 0.095, '\n'.join([
				'p$_{z,\mathrm{%s}}$ = %.0e' % (
					cloud_types[i].lower() if nclasses == 4 else cloud_types[i],
					pz[i],
				)
				for i in range(len(cloud_types))
			]),
			transform=plt.gca().transAxes,
			bbox=dict(facecolor='#eeeeee', edgecolor='none'),
			fontsize=8,
		)

	x = np.arange(len(h), dtype=np.float64)
	plt.grid(True, zorder=-1, axis=('y' if nclasses == 27 else 'both'))
	if opts.get('legend', True):
		if nclasses == 4:
			plt.legend(
				loc='lower right',
				labelspacing=0.2,
				bbox_to_anchor=(1, 0.06),
			)
		elif nclasses == 10:
			plt.legend(
				loc='lower right',
				labelspacing=0.2,
			)
		else:
			plt.legend(
				labelspacing=0.2,
				bbox_to_anchor=(1.005, 1.1),
				fontsize=8,
			)

	ytext = ylim[0] + (ylim[1] - ylim[0])*0.05
	plt.text(x[0] - 0.45, ytext, varname.upper()+' (K):',
		fontsize=9,
		ha='right',
		va='top',
	)
	for i in range(len(x)):
		ecs, ext = get_ecs(d_ecs, varname, d['models'][mask][i])
		color = 'k'
		if ecs is not None and np.isfinite(ecs):
			ecs_s = ('%.1f' % ecs) if not ext else (' %.1f$^*$' % ecs)
		else:
			ecs_s = ''
		plt.text(x[i], ytext, ecs_s,
			fontsize=9,
			ha='center',
			va='top',
			bbox=dict(facecolor='#ffffff', edgecolor='none', boxstyle='square,pad=0.05'),
			color=color,
		)

	if regression:
		plt.subplot(nrow, ncol, nrow*ncol)
		res = 0
		for i, cloud_type in enumerate(['Hi', 'Mi', 'Cu', 'St']):
			plt.scatter(
				(d['cloud_occurrence_tas'][:,i])*100,
				var,
				s=20,
				color=COLORS[i]
			)
			x = np.linspace(-2, 2, 200)
			y = np.full(len(x), np.nan)
			ylow = np.full(len(x), np.nan)
			yhigh = np.full(len(x), np.nan)
			for j in range(len(x)):
				u = d['c1_'+varname+'_samples'][i,:]*x[j] + \
					d['c0_'+varname+'_samples'][i,:]
				y[j] = np.mean(u)
				ylow[j] = np.percentile(u, (100-68)/2)
				yhigh[j] = np.percentile(u, 100-(100-68)/2)
			plt.fill_between(x, ylow, yhigh, color=COLORS[i], alpha=0.1)
			plt.plot(x, y, color=COLORS[i])
		plt.xlim(-0.6, 0.4)
		if varname == 'ecs':
			plt.ylim(1.5, 6)
		elif varname == 'tcr':
			plt.ylim(1, 3)
		elif varname == 'cld':
			plt.ylim(-0.2, 0.9)

		plt.xlabel('Cloud type occurrence change (% K$^{-1}$)')
		plt.ylabel(LABELS[varname])

		plt.subplots_adjust(wspace=0.15)

	w, h = plt.gcf().get_size_inches()
	plt.subplots_adjust(
		left=0.9/w,
		right=(1 - 2.1/w if nclasses == 27 else 1 - 0.1/w),
		top=1 - 0.4/h,
		bottom=1.6/h,
	)

	ylim = plt.gca().get_ylim()

	plt.suptitle(
		(title if title is not None else ''),
		linespacing=1.4,
		fontsize=10,
	)

	print('-> %s' % output)
	plt.savefig(output, bbox_inches='tight')
