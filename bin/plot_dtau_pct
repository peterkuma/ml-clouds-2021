#!/usr/bin/env python3
'''Plot cloud optical depth - cloud top pressure histogram.

Usage: plot_dtau_pct INPUT OUTPUT

Arguments:

  INPUT   Input file. The output of calc_dtau_pct (NetCDF).
  OUTPUT  Output plot (PDF).

Examples:

bin/plot_dtau_pct data/dtau_pct/dtau_pct.nc plot/dtau_pct.png
'''

import sys
import string
import numpy as np
import ds_format as ds
import matplotlib.pyplot as plt
import matplotlib as mpl

LETTERS = string.ascii_lowercase + \
	''.join([chr(code) for code in range(945,970)])

TITLE_FONTSIZE0 = 11
TITLE_FONTSIZE1 = 11
TITLE_FONTSIZE2 = 10

CLOUD_TYPES0 = ['High', 'Middle', 'Cumuliform', 'Stratiform']
CLOUD_TYPES1 = ['Ci', 'Cs', 'Cc', 'As', 'Ac', 'Cu', 'Sc', 'St', 'Cu+Sc', 'Cb']
CLOUD_TYPES2 = [
	'Cirrus\nfibratus/uncinus (H1)',
	'Cirrus spissatus (H2)',
	'Cirrus spissatus\ncumulonimbogenitus (H3)',
	'Cirrus\nfibratus/uncinus (H4)',
	'Cirrus/cirrostratus (H5)',
	'Cirrus/cirrostratus (H6)',
	'Cirrostratus whole sky (H7)',
	'Cirrostratus\nnot whole sky (H8)',
	'Cirrocumulus (H9)',
	'Cumulonimbus\ncapillatus (M1)',
	'Altostratus\nopacus/nimbostratus (M2)',
	'Altocumulus\ntranslucidus\nsingle level (M3)',
	'Altocumulus\ntranslucidus patches (M4)',
	'Altocumulus\ntranslucidus bands (M5)',
	'Altocumulus\ncumulogenitus (M6)',
	'Altocumulus\ntranslucidus/opacus (M7)',
	'Altocumulus\ncastellanus/floccus (M8)',
	'Altocumulus\nchaotic sky (M9)',
	'Cumulus\nhumilis/fractus (L1)',
	'Cumulus\nmediocris/congestus (L2)',
	'Cumulonimbus calvus (L3)',
	'Stratocumulus\ncumulogenitus (L4)',
	'Stratocumulus (L5)',
	'Stratus\nnebulosus/fractus (L6)',
	'Stratus/cumulus fractus (L7)',
	'Cumulus and\nstratocumulus (L8)',
	'Cumulonimbus\ncapillatus (L9)', ]

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)

def plot_isccp():
	x = np.arange(1, 60, 1)
	y = np.arange(0, 1000, 1)
	w = len(x)
	h = len(y)
	y, x = np.meshgrid(y, x)

	m = [None]*7
	m[0] = (y >= 680) & (x < 3.6)
	m[1] = (y >= 680) & (x >= 3.6)
	m[2] = (y >= 440) & (y < 680) & (x < 9.4)
	m[3] = (y >= 440) & (y < 680) & (x >= 9.4)
	m[4] = ((y < 440) & (y >= 310) & (x < 3.6)) | \
		((y < 310) & (x < 9.4))
	m[5] = ((y < 440) & (y >= 310) & (x >= 3.6) & (x < 23)) | \
		((y < 310) & (x >= 9.4) & (x < 23))
	m[6] = (y < 440) & (x >= 23)

	m2 = [None]*4
	m2[0] = m[4] | m[5]
	m2[1] = m[2]
	m2[2] = m[0] | m[6]
	m2[3] = m[1] | m[3]

	z = np.zeros((w, h), np.int64)
	for i in range(len(m2)):
		if m2[i] is not None:
			z[m2[i]] = i
	tab10 = mpl.cm.get_cmap('tab10')
	cmap = mpl.colors.ListedColormap([tab10(i) for i in range(4)])
	im = plt.imshow(z.T, cmap=cmap, extent=(1, 60, 1000, 0), aspect='auto',
		interpolation='nearest', norm=mpl.colors.Normalize(0, 4))
	plt.gca().set_xscale('log')
	plt.gca().invert_yaxis()
	plt.gca().yaxis.set_ticklabels([])
	plt.ylim(1000, 0)
	plt.xlim(1, 60)
	plt.title('ISCCP classes', fontsize=title_fontsize)
	return im

if __name__ == '__main__':
	if len(sys.argv) != 3:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = sys.argv[1]
	output = sys.argv[2]

	print('<- %s' % input_)
	d = ds.read(input_)
	n = d['hist'].shape[0]

	if n == 4:
		cloud_types = CLOUD_TYPES0
		title_fontsize = TITLE_FONTSIZE0
	elif n == 10:
		cloud_types = CLOUD_TYPES1
		title_fontsize = TITLE_FONTSIZE1
	elif n == 27:
		cloud_types = CLOUD_TYPES2
		title_fontsize = TITLE_FONTSIZE2
	else:
		raise ValueError('Unknown number of cloud types: %d' % n)

	hist_m = np.mean(d['hist'], axis=0)
	hist_max = np.max(d['hist'])

	width = 9*(n+1)/4 + 1
	fig = plt.figure(figsize=(width, 2))

	ax = plt.subplot(1, n + 2, 1)
	cf_ref = plt.contourf(d['dtau'], d['pct']*1e-2, hist_m.T/hist_max*10,
		levels=np.arange(0, 7.5, 0.5),
	)
	ax.set_xscale('log')
	ax.invert_yaxis()
	plt.title('Mean')
	plt.ylabel('Cloud top pressure (hPa)')
	plt.xlabel('Cloud optical depth')
	plt.ylim(1000, 0)
	plt.xlim(1, 60)
	plt.text(0.02, 0.98, '(' + LETTERS[0] + ')',
		transform=plt.gca().transAxes,
		va='top', ha='left', weight='bold', fontsize=10, color='white')

	max_ = 0
	for i in range(n):
		z = (d['hist'][i,:,:] - hist_m).T/hist_max*10
		max_ = max(max_, np.ceil(np.nanmax(np.abs(z))))

	for i in range(n):
		ax = plt.subplot(1, n + 2, i + 2)
		x = d['dtau']
		y = d['pct']*1e-2
		z = (d['hist'][i,:,:] - hist_m).T/hist_max*10
		cf2 = plt.contourf(x, y, z,
			levels=np.arange(-max_, max_+0.1, 0.1),
			cmap='bwr'
		)
		ax.set_xscale('log')
		ax.invert_yaxis()
		plt.title(cloud_types[i], fontsize=title_fontsize)
		ax.yaxis.set_ticklabels([])
		plt.ylim(1000, 0)
		plt.xlim(1, 60)
		plt.text(0.02, 0.98, '(' + LETTERS[i + 1] + ')',
			transform=plt.gca().transAxes,
			va='top', ha='left', weight='bold', fontsize=10)

	ax = plt.subplot(1, n + 2, i + 3)
	im = plot_isccp()
	plt.text(0.02, 0.98, '(' + LETTERS[i + 2] + ')',
		transform=plt.gca().transAxes,
		va='top', ha='left', weight='bold', fontsize=10)
	ticks_ref = np.arange(0, 11, 1)
	ticks = np.arange(-max_, max_+1, 1)

	pos = ax.get_position()
	w = pos.x1 - pos.x0
	h = pos.y1 - pos.y0
	cax = fig.add_axes([pos.x1 + w*0.1, pos.y0, w*0.1, h])
	cb = fig.colorbar(cf_ref, cax=cax, orientation='vertical',
		ticks=ticks_ref)
	cb.set_label(label='Absolute density (a.u.)', fontsize=8)
	cb.ax.tick_params(labelsize=7)

	cax = fig.add_axes([pos.x1 + w*0.55, pos.y0, w*0.1, h])
	cb = fig.colorbar(cf2, cax=cax, ticks=ticks)
	cb.set_label(label='Relative density (a.u.)', fontsize=8)
	cb.ax.tick_params(labelsize=7)

	cax = fig.add_axes([pos.x1 + w*1.00, pos.y0, w*0.1, h])
	cb = fig.colorbar(im, cax=cax)
	cb.set_label(label='ISCCP class', fontsize=8)
	cb.set_ticks(np.arange(4) + 0.5)
	cb.set_ticklabels(['High', 'Middle', 'Cumuliform', 'Stratiform'])
	cb.ax.tick_params(labelsize=7)

	plt.subplots_adjust(wspace=0.1)

	print('-> %s' % output)
	plt.savefig(output, bbox_inches='tight', dpi=160)
