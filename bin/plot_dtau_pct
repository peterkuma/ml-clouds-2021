#!/usr/bin/env python3
'''Plot cloud optical depth - cloud top pressure histogram.

Usage: plot_dtau_pct <input> <output>

Depends on: calc_dtau_pct

Arguments:

- input: Input file - the output of calc_dtau_pct (NetCDF).
- output: Output plot (PDF).

Example:

bin/plot_dtau_pct data/dtau_pct/dtau_pct.nc plot/dtau_pct.pdf
'''

import sys
import string
import numpy as np
import ds_format as ds
import matplotlib.pyplot as plt
import matplotlib as mpl

CLOUD_TYPES = ['High', 'Middle', 'Cumuliform', 'Stratiform']

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)

if __name__ == '__main__':
	if len(sys.argv) != 3:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = sys.argv[1]
	output = sys.argv[2]

	fig = plt.figure(figsize=(10, 4))

	d = ds.read(input_)
	n = len(CLOUD_TYPES)
	hist_m = np.mean(d['hist'], axis=0)
	hist_max = np.max(d['hist'])

	ax = plt.subplot(2, n + 1, 1)
	cf_ref = plt.contourf(d['dtau'], d['pct']*1e-2, hist_m.T/hist_max*10,
		levels=np.arange(0, 10.5, 0.5),
	)
	ax.set_xscale('log')
	ax.invert_yaxis()
	plt.title('Mean')
	plt.text(0.07, 0.5, 'Cloud top pressure (hPa)',
		ha='right', va='center', rotation=90, transform=plt.gcf().transFigure)
	plt.ylim(1000, 0)
	plt.xlim(1, 60)
	plt.text(0.02, 0.98, '(' + string.ascii_lowercase[0] + ')',
		transform=plt.gca().transAxes,
		va='top', ha='left', weight='bold', fontsize=8, color='white')

	for i in range(n):
		ax = plt.subplot(2, n + 1, i + 2)
		cf1 = plt.contourf(d['dtau'], d['pct']*1e-2, 10*np.log10(d['hist'][i,:,:]/hist_m).T,
		#cf1 = plt.contourf(d['dtau'], d['pct']*1e-2, ((d['hist'][i,:,:] - hist_m)/hist_m).T*100,
			#locator=mpl.ticker.LogLocator(),
			#levels=np.arange(-0.4, 0.5, 0.01)*100,
			levels=np.arange(-1.2, 1.3, 0.1),
			cmap='bwr'
		)
		ax.set_xscale('log')
		ax.invert_yaxis()
		plt.title(CLOUD_TYPES[i], fontsize=11)
		ax.yaxis.set_ticklabels([])
		plt.ylim(1000, 0)
		plt.xlim(1, 60)
		plt.text(0.02, 0.98, '(' + string.ascii_lowercase[i + 1] + ')',
			transform=plt.gca().transAxes,
			va='top', ha='left', weight='bold', fontsize=8)

	for i in range(n):
		ax = plt.subplot(2, n + 1, (n + 1) + i + 2)
		cf2 = plt.contourf(d['dtau'], d['pct']*1e-2, (d['hist'][i,:,:] - hist_m).T/hist_max*10,
			levels=np.arange(-1.2, 1.3, 0.1),
			cmap='bwr'
		)
		ax.set_xscale('log')
		ax.invert_yaxis()
		if i != 0:
			ax.yaxis.set_ticklabels([])
		plt.ylim(1000, 0)
		plt.xlim(1, 60)
		plt.text(0.02, 0.98, '(' + string.ascii_lowercase[n + i + 1] + ')',
			transform=plt.gca().transAxes,
			va='top', ha='left', weight='bold', fontsize=8)
	plt.text(0.6, 0.03, 'Cloud optical depth',
		va='top', ha='center', transform=plt.gcf().transFigure)

	ticks_ref = np.arange(0, 11, 1)
	#ticks1 = np.arange(-1.2, 1.4, 0.2)*100
	ticks1 = np.arange(-1.2, 1.4, 0.2)
	ticks2 = np.arange(-1.2, 1.4, 0.2)

	cax = fig.add_axes([0.15, 0.1, 0.01, 0.35])
	cb = fig.colorbar(cf_ref, cax=cax, orientation='vertical',
		ticks=ticks_ref)
	cb.set_label(label='Absolute density (a.u.)', fontsize=8)
	cb.ax.tick_params(labelsize=7)

	cax = fig.add_axes([0.91, 0.53, 0.01, 0.35])
	cb = fig.colorbar(cf1, cax=cax, ticks=ticks1)
	cb.set_label(label='Relative log-density (dB)', fontsize=8)
	cb.ax.tick_params(labelsize=7)

	cax = fig.add_axes([0.91, 0.11, 0.01, 0.35])
	cb = fig.colorbar(cf2, cax=cax, ticks=ticks2)
	cb.set_label(label='Relative density (a.u.)', fontsize=8)
	cb.ax.tick_params(labelsize=7)

	plt.subplots_adjust(wspace=0.15)

	plt.savefig(output, bbox_inches='tight')
