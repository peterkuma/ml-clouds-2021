#!/usr/bin/env python3
'''Plot sample.

Usage: plot_samples INPUT N OUTPUT

This program uses PST for command line argument parsing.

Arguments:

  INPUT   Input sample (NetCDF). The output of tf.
  N       Sample number.
  OUTPUT  Output plot (PDF).

Examples:

bin/plot_sample data/samples/ceres_training/2010/2010-01-01T00\:00\:00.nc 0 plot/sample.pdf
'''

import sys
import pst
import ds_format as ds
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np

D = 2e6
COLORS = ['#46e64c', '#5b5bff']

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='white')
mpl.rc('grid', alpha=0.4)
mpl.rc('grid', lw=0.2)

CLOUD_TYPES = ['High', 'Middle', 'Cumuliform', 'Stratiform']

def plot_data(x, d, title, cmap='Greys_r', xlabel=True, ylabel=True):
	im = plt.imshow(1e2*x, cmap=cmap,
		extent=(-D*1e-3, D*1e-3, -D*1e-3, D*1e-3),
		vmin=0, vmax=100, origin='lower')
	plt.title(title)
	if 'station_x' in d:
		mask = np.isfinite(d['station_x'][n,:]) & \
			np.isfinite(d['station_y'][n,:])
		station_x = d['station_x'][n,mask]
		station_y = d['station_y'][n,mask]
		station_lon = d['station_lon'][n,mask]
		station_lat = d['station_lat'][n,mask]
		station_type = d['station_type'][n,mask]
		color = np.where(station_type == 'synop', COLORS[0], COLORS[1])
		marker = list(np.where(station_type == 'synop', 'o', 's'))
		for i in range(len(station_x)):
			plt.scatter(station_x[i]*1e-3, station_y[i]*1e-3,
				s=10, lw=0.2, color='none', edgecolors=color[i],
				marker=marker[i])
	if xlabel:
		plt.xlabel('West–East (km)')
	else:
		plt.gca().xaxis.set_ticklabels([])
	if ylabel:
		plt.ylabel('South–North (km)')
	else:
		plt.gca().yaxis.set_ticklabels([])
	plt.xticks(np.arange(-D*1e-3, D*1e-3 + 1000, 1000))
	plt.yticks(np.arange(-D*1e-3, D*1e-3 + 1000, 1000))
	return im

if __name__ == '__main__':
	args, opts = pst.decode_argv(sys.argv, as_unicode=True)
	if len(args) != 5:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input1 = args[1]
	input2 = args[2]
	n = args[3]
	output = args[4]
	d1 = ds.read(input1)
	d2 = ds.read(input2)
	fig = plt.figure(figsize=(18,6))
	plt.subplot(1, 6, 1)
	plot_data(d1['data'][n,0], d1, 'SW')
	plt.subplot(1, 6, 2)
	im1 = plot_data(d1['data'][n,1], d1, 'LW', ylabel=False)
	plt.subplots_adjust(wspace=0.2)
	for i, cloud_type in enumerate(CLOUD_TYPES):
		plt.subplot(1, 6, 3 + i)
		im2 = plot_data(d2['stats'][n,:,:,i], d2, cloud_type,
			cmap='viridis',
			ylabel=False)
	cax1 = fig.add_axes([0.92, 0.26, 0.01, 0.45])
	cb1 = fig.colorbar(im1, cax=cax1, ticks=np.arange(0, 110, 10))
	cb1.set_label(label='Normalised reflected TOA radiation (%)', fontsize=11)
	cb1.ax.tick_params(labelsize=7)
	cax2 = fig.add_axes([0.98, 0.26, 0.01, 0.45])
	cb1 = fig.colorbar(im2, cax=cax2, ticks=np.arange(0, 110, 10))
	cb1.set_label(label='Probability of cloud type occurrence (%)', fontsize=11)
	cb1.ax.tick_params(labelsize=7)

	print('-> %s' % output)
	plt.savefig(output, bbox_inches='tight', dpi=300)
