#!/usr/bin/env python3
'''Plot sample.

Usage: plot_samples <input> <n> <output>

Depends on: tf

Arguments:

- input: Input sample (NetCDF) - the output of tf.
- n: Sample number.
- output: Output plot (PDF).

bin/plot_sample data/samples/ceres_training/2010/2010-01-01T00\:00\:00.nc 0 plot/sample.pdf
'''

import sys
import pst
import ds_format as ds
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np

D = 2e6
COLORS = ['#46e64c', '#5b5bff']

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='white')
mpl.rc('grid', alpha=0.4)
mpl.rc('grid', lw=0.2)

def plot_data(d, n, k, title, xlabel=True, ylabel=True):
	im = plt.imshow(1e2*d['data'][n,k,:,:], cmap='Greys_r',
		extent=(-D*1e-3, D*1e-3, -D*1e-3, D*1e-3),
		vmin=0, vmax=100, origin='lower')
	plt.title(title)
	if 'station_x' in d:
		mask = np.isfinite(d['station_x'][n,:]) & np.isfinite(d['station_y'][n,:])
		station_x = d['station_x'][n,mask]
		station_y = d['station_y'][n,mask]
		station_lon = d['station_lon'][n,mask]
		station_lat = d['station_lat'][n,mask]
		station_type = d['station_type'][n,mask]
		color = np.where(station_type == 'synop', COLORS[0], COLORS[1])
		marker = list(np.where(station_type == 'synop', 'o', 's'))
		for i in range(len(station_x)):
			plt.scatter(station_x[i]*1e-3, station_y[i]*1e-3,
				s=10, lw=0.2, color='none', edgecolors=color[i],
				marker=marker[i])
	if xlabel:
		plt.xlabel('West–East (km)')
	else:
		plt.gca().xaxis.set_ticklabels([])
	if ylabel:
		plt.ylabel('South–North (km)')
	else:
		plt.gca().yaxis.set_ticklabels([])
	plt.xticks(np.arange(-D*1e-3, D*1e-3 + 1000, 1000))
	plt.yticks(np.arange(-D*1e-3, D*1e-3 + 1000, 1000))
	return im

def stats_to_label(stats, stats_n):
	stats2 = np.zeros(4, np.float64)
	stats2_n = np.zeros(4, np.float64)
	stats2[0] = np.nansum(stats[1:4]) # Ci, Cs, Cc
	stats2_n[0] = stats_n[1]
	stats2[1] = np.nansum(stats[5:7]) # As, Ac
	stats2_n[1] = stats_n[5]
	stats2[2] = np.nansum([stats[8], stats[11], stats[12]]) # Cu, Cb
	stats2_n[2] = stats_n[8]
	stats2[3] = np.nansum(stats[9:11]) # Sc, St
	stats2_n[3] = stats_n[9]
	return np.array([stats2[i]/stats2_n[i] if stats2_n[i] > 0 else 0
		for i in range(len(stats2))])

if __name__ == '__main__':
	args, opts = pst.decode_argv(sys.argv, as_unicode=True)
	if len(args) != 4:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = args[1]
	n = args[2]
	output = args[3]
	d = ds.read(input_)
	fig = plt.figure()
	plt.subplot(1, 2, 1)
	plot_data(d, n, 0, 'SW')
	plt.subplot(1, 2, 2)
	im = plot_data(d, n, 1, 'LW', ylabel=False)
	plt.subplots_adjust(wspace=0.2)
	cax = fig.add_axes([0.93, 0.26, 0.02, 0.47])
	cb = fig.colorbar(im, cax=cax, ticks=np.arange(0, 110, 10))
	cb.set_label(label='Normalised reflected TOA radiation (%)', fontsize=8)
	cb.ax.tick_params(labelsize=7)
	plt.savefig(output, bbox_inches='tight', dpi=300)
	if 'stats' in d:
		print(stats_to_label(d['stats'][n,:], d['stats_n'][n,:]))
