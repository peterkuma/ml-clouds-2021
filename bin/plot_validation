#!/usr/bin/env python3
'''
Calculate cross-validation statistics.

Usage: bin/plot_validation <idd_val> <idd_train> <input>... <output> [options]

Arguments:

- idd_val: Validation IDD dataset - the output of calc_idd_geo for validation years (NetCDF).
- idd_train: Training IDD dataset - the output of calc_idd_geo for training years (NetCDF).
- input: CERES dataset - the output of calc_geo_cto or merge_xval_geo_cto (NetCDF).
- output: Output plot (PDF).

Options:

--normalized: Plot normalized plots.

Examples:

bin/plot_validation data/idd_geo/{validation,training}.nc data/geo_cto/historical/all/CERES.nc data/xval/geo_cto/CERES_sectors.nc plot/validation.pdf
'''

import os
import numpy as np
from glob import glob
import sys
import string
import pst
import ds_format as ds
import aquarius_time as aq
from matplotlib import pyplot as plt
import matplotlib as mpl
import cartopy.crs as ccrs

CLOUD_TYPES0 = ['High', 'Middle', 'Cumuliform', 'Stratiform']
CLOUD_TYPES1 = ['Ci', 'Cs', 'Cc', 'As', 'Ac', 'Cu', 'Sc', 'St', 'Cu+Sc', 'Cb']
CLOUD_TYPES2 = [
	'Cirrus fibratus/uncinus (H1)',
	'Cirrus spissatus (H2)',
	'Cirrus spissatus\ncumulonimbogenitus (H3)',
	'Cirrus fibratus/uncinus (H4)',
	'Cirrus/cirrostratus (H5)',
	'Cirrus/cirrostratus (H6)',
	'Cirrostratus whole sky (H7)',
	'Cirrostratus\nnot whole sky (H8)',
	'Cirrocumulus (H9)',
	'Cumulonimbus\ncapillatus (M1)',
	'Altostratus\nopacus/nimbostratus (M2)',
	'Altocumulus\ntranslucidus\nsingle level (M3)',
	'Altocumulus\ntranslucidus patches (M4)',
	'Altocumulus\ntranslucidus bands (M5)',
	'Altocumulus\ncumulogenitus (M6)',
	'Altocumulus\ntranslucidus/opacus (M7)',
	'Altocumulus\ncastellanus/floccus (M8)',
	'Altocumulus\nchaotic sky (M9)',
	'Cumulus\nhumilis/fractus (L1)',
	'Cumulus\nmediocris/congestus (L2)',
	'Cumulonimbus calvus (L3)',
	'Stratocumulus\ncumulogenitus (L4)',
	'Stratocumulus (L5)',
	'Stratus\nnebulosus/fractus (L6)',
	'Stratus/cumulus fractus (L7)',
	'Cumulus\nand stratocumulus (L8)',
	'Cumulonimbus capillatus (L9)',
]

MARW = 2
MARH = 0.5

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

np.seterr(divide='ignore', invalid='ignore')

def plot_rmse(x, align, rmse1, rmse2):
	plt.text(x, 0.15, '%.1f %%' % rmse1,
		va='bottom',
		ha=align,
		transform=plt.gca().transAxes,
		weight='bold',
		fontsize=9,
	)
	plt.text(x, 0.01, '%.1f %%' % rmse2,
		va='bottom',
		ha=align,
		transform=plt.gca().transAxes,
		weight='bold',
		fontsize=9,
	)

def mask_idd(d):
	b = d['stats_n_daily'].astype(float)
	mask1 = np.sum(b > 0, axis=1) >= 365*0.7
	mask = np.ones(b.shape, bool)
	for i in range(mask.shape[1]):
		mask[:,i,:,:] = mask1
	mask &= b >= 15
	for x in ['stats_daily', 'stats_n_daily', 'cloud_occurrence_daily']:
		if x not in d:
			continue
		d[x] = d[x].astype(float)
		d[x][~mask] = np.nan

def idd_const(d, rel):
	a = d['stats_daily']
	b = d['stats_n_daily']
	x = d['cloud_occurrence_daily']
	x_new = np.zeros(rel['cloud_occurrence_daily'].shape, float)
	for i in range(x.shape[0]):
		x_new[i][::] = np.nansum(a[i])/np.nansum(b[i])
	do = {}
	do['cloud_occurrence_daily'] = x_new
	for k in ['lat', 'lon', 'lat_bnds', 'lon_bnds']:
		do[k] = d[k]
	return do

def plot(d, k, rel=None, first=False, normf=None):
	xd = d['cloud_occurrence_daily'][k]
	x = np.nanmean(xd, axis=0)
	if rel is not None:
		yd = rel['cloud_occurrence_daily'][k]
		err = xd - yd
		y = np.nanmean(yd, axis=0)
		x -= y
		err2 = np.nanmean(err, axis=0)
		latg, _ = np.meshgrid(d['lat'], d['lon'])
		latg = latg.T
		w1 = np.cos(latg/180*np.pi)

		w = np.full(err2.shape, np.nan, float)
		w[::] = w1
		w[np.isnan(err2)] = np.nan
		w /= np.nansum(w)
		rmse1 = np.sqrt(np.nansum(err2**2*w))

		w = np.full(err.shape, np.nan, float)
		for i in range(w.shape[0]):
			w[i] = w1
			w[i][np.isnan(err[i])] = np.nan
		w /= np.nansum(w)
		rmse2 = np.sqrt(np.nansum(err**2*w))

		cmap = 'bwr'
		vmin = -0.9
		vmax = 0.9
	else:
		cmap = 'viridis'
		vmin = 0
		vmax = 1
		rmse1 = None
		rmse2 = None
	res = plt.imshow(x*100/(normf[k] if normf is not None else 1),
		origin='lower',
		vmin=vmin*100,
		vmax=vmax*100,
		cmap=cmap,
		extent=(-180, 180, -90, 90),
		interpolation='none',
	)
	if rel is not None:
		if first:
			plt.text(0.01, 0.15, 'RMSE annual:',
				va='bottom',
				ha='left',
				transform=plt.gca().transAxes,
				fontsize=9,
			)
			plt.text(0.01, 0.01, 'RMSE day:',
				va='bottom',
				ha='left',
				transform=plt.gca().transAxes,
				fontsize=9,
			)
		plot_rmse(0.98, 'right', rmse1*100, rmse2*100)
	return res, rmse1, rmse2

def subplot(nrows, ncols, n):
	ax = fig.add_subplot(nrows, ncols, n, projection=ccrs.PlateCarree())
	ax.coastlines(lw=0.4)

def select_time(d1, d2):
	sel = [t in d1['time'] for t in d2['time']]
	ds.select(d1, {'time': sel})

def label(x):
	x = x.replace('CERES', 'CERES (ANN)')
	plt.text(-0.02, 0.5, x,
		transform=plt.gca().transAxes,
		rotation=90,
		va='center',
		ha='right',
		fontsize=7,
	)

def letter(row, col, color='k'):
	plt.text(0.01, 0.98,
		'(%s%d)' % (string.ascii_letters[row - 1], col),
		va='top',
		ha='left',
		weight='bold',
		fontsize=8,
		transform=plt.gca().transAxes,
		color=color,
	)

if __name__ == '__main__':
	args, opts = pst.decode_argv(sys.argv, as_unicode=True)
	if len(args) < 4:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	idd_val = args[1]
	idd_train = args[2]
	input_ = args[3:-1]
	output = args[-1]
	normalized = opts.get('normalized')

	print('<- %s' % idd_val)
	d_idd_val = ds.read(idd_val)
	print('<- %s' % idd_train)
	d_idd_train = ds.read(idd_train)

	nclasses = ds.dim(d_idd_val, 'cloud_type')

	mask_idd(d_idd_val)
	d_idd_train_const = idd_const(d_idd_train, d_idd_val)

	dd = []
	for filename in input_:
		name = os.path.splitext(os.path.basename(filename))[0].replace('_', ' ')
		print('<- %s' % filename)
		d = ds.read(filename)
		ds.attr(d, 'name', name)
		select_time(d, d_idd_val)
		dd += [d]

	normf = np.full(nclasses, np.nan, np.float64)
	for j in range(nclasses):
		normf[j] = np.nanmax(dd[0]['cloud_occurrence'][j,:,:])

	ncols = nclasses
	nrows = 2 + len(dd)*2
	if normalized:
		nrows += 1 + len(dd)

	cloud_types = {
		4: CLOUD_TYPES0,
		10: CLOUD_TYPES1,
		27: CLOUD_TYPES2,
	}[nclasses]

	RATIO = 2

	w = RATIO*ncols + 2*MARW
	h = RATIO*0.5*nrows + 2*MARH
	marw = MARW/w
	marh = MARH/h
	mpl.rc('figure.subplot',
		left=marw, right=(1 - marw), bottom=marh, top=(1 - marh))

	fig = plt.figure(figsize=(w, h))

	row = 0
	for i, cloud_type in enumerate(cloud_types):
		subplot(nrows, ncols, 1 + row*ncols + i)
		plot(d_idd_val, i)
		plt.title(cloud_type, fontsize=9)
		if i == 0:
			label('IDD')
		letter(row + 1, i + 1)
		if i == nclasses - 1:
			plt.text(1.05, 1, 'Total RMSE:',
				ha='left',
				va='top',
				rotation=-90,
				transform=plt.gca().transAxes,
				fontsize=9,
			)
		if normalized:
			subplot(nrows, ncols, 1 + (row + 1)*ncols + i)
			plot(d_idd_val, i, normf=normf)
			letter(row + 2, i + 1)
			if i == 0:
				label('IDD (normalised)')

	row += 1
	if normalized:
		row += 1

	mse1 = 0
	mse2 = 0
	for i in range(nclasses):
		subplot(nrows, ncols, 1 + row*ncols + i)
		_, rmse1, rmse2 = plot(d_idd_train_const, i, rel=d_idd_val, first=(i == 0))
		mse1 += rmse1**2
		mse2 += rmse2**2
		if i == 0:
			label('Constant - IDD')
		letter(row + 1, i + 1)
		if i == nclasses - 1:
			plot_rmse(
				1.02, 'left',
				np.sqrt(mse1/nclasses)*100,
				np.sqrt(mse2/nclasses)*100,
			)
	row += 1

	for j, d in enumerate(dd):
		name = d['.']['.']['name']
		mse1 = 0
		mse2 = 0
		for i in range(nclasses):
			subplot(nrows, ncols, 1 + row*ncols + i)
			plt1, _, _ = plot(d, i)
			if i == 0:
				label(name)
			if name == 'CERES sectors':
				plt.axhline(0, lw=0.5, color='k', linestyle='dashed')
				plt.axvline(0, lw=0.5, color='k', linestyle='dashed')
			letter(row + 1, i + 1, color=('k' if name == 'regions' else 'white'))
			if normalized:
				subplot(nrows, ncols, 1 + (row + 1)*ncols + i)
				_, _, _ = plot(d, i, normf=normf)
				if i == 0:
					label(name + '\n(normalised)')
				letter(row + 2, i + 1, color=('k' if name == 'regions' else 'white'))
			subplot(nrows, ncols, 1 + (row + 1 + normalized)*ncols + i)
			plt2, rmse1, rmse2 = plot(d, i, rel=d_idd_val, first=(i == 0))
			mse1 += rmse1**2
			mse2 += rmse2**2
			if i == 0:
				label('%s - IDD' % name)
			letter(row + 2 + normalized, i + 1)
			if i == nclasses - 1:
				plot_rmse(
					1.02, 'left',
					np.sqrt(mse1/nclasses)*100,
					np.sqrt(mse2/nclasses)*100,
				)
		row += 2 + normalized
	plt.subplots_adjust(hspace=0, wspace=0)
	cax = fig.add_axes([1 - 1.4/w, 0.6, 0.12/w, 0.3])
	cb = plt.colorbar(plt1, cax=cax)
	cb.set_label(label='Cloud type occurrence probability', fontsize=8)
	cax = fig.add_axes([1 - 1.4/w, 0.1, 0.12/w, 0.3])
	cb = plt.colorbar(plt2, cax=cax)
	cb.set_ticks(np.arange(-90, 100, 30))
	cb.set_label(label='Cloud type occurrence probability anomaly', fontsize=8)
	print('-> %s' % output)
	plt.savefig(output, bbox_inches='tight', dpi=280)
