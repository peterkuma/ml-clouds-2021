#!/usr/bin/env python3
'''Plot IDD stations on a map.

Usage: plot_idd_stations INPUT SAMPLE N OUTPUT TITLE

This program uses PST for command line argument parsing.

Arguments:

  INPUT   IDD input directory (NetCDF).
  SAMPLE  CERES sample. The output of tf apply (NetCDF).
  N       Sample number.
  OUTPUT  Output plot (PDF).
  TITLE   Plot title.

Examples:

bin/plot_idd_stations data/idd_sample/ data/samples/ceres/2010/2010-01-01T00\:00\:00.nc 0 plot/idd_stations.png '2010-01-01'
'''

import sys
import pst
import numpy as np
import ds_format as ds
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.ticker as mticker
import cartopy.crs as ccrs
from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

COLORS = ['#46e64c', '#5b5bff']
LABELS = ['SYNOP', 'BUOY']
MARKERS = ['o', 's']

if __name__ == '__main__':
	args, opts = pst.decode_argv(sys.argv, as_unicode=True)
	if len(args) != 6:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = args[1]
	sample = args[2]
	n = args[3]
	output = args[4]
	title = args[5]
	if sample is not None:
		d_s = ds.read(sample)
	dd = ds.readdir(input_, \
		['Lat', 'Lon', 'cloudHigh', 'cloudMiddle', 'cloudLow'])
	fig = plt.figure(figsize=(5, 5))
	ax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())
	if sample is not None:
		plt.contourf(
			d_s['lon'][n,:,:],
			d_s['lat'][n,:,:],
			d_s['data'][n,0,:,:]*100,
			cmap='Greys_r',
			levels=np.arange(0, 100, 5)
		)
	for i, d in enumerate(reversed(dd)):
		if 'cloudLow' in d and \
		   'cloudMiddle' in d and \
		   'cloudHigh' in d:
			mask = \
				(~d['cloudHigh'].mask) | \
				(~d['cloudMiddle'].mask) | \
				(~d['cloudLow'].mask)
		else:
			mask = np.ones(len(d['Lon']))
		plt.scatter(d['Lon'][mask], d['Lat'][mask], s=3, lw=0.2, color='none',
			edgecolors=COLORS[i], marker=MARKERS[i], label=LABELS[i])
	ax.coastlines(lw=0.2)
	ax.outline_patch.set_linewidth(0.3)
	plt.xlim(-180, 180)
	plt.ylim(-90, 90)
	gl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=True,
		linewidth=0.3, color='k', alpha=0.3, linestyle='dashed')
	gl.xlabels_top = False
	gl.ylabels_right = False
	gl.xlabel_style = {'size': 6}
	gl.ylabel_style = {'size': 6}
	gl.xlocator = mticker.FixedLocator(np.arange(-180, 180+30, 30))
	gl.ylocator = mticker.FixedLocator(np.arange(-90, 90+30, 30))
	gl.xformatter = LONGITUDE_FORMATTER
	gl.yformatter = LATITUDE_FORMATTER
	plt.title('Location of IDD stations: %s' % title, fontsize=7)
	plt.legend(fontsize=4.5, loc='upper right')
	plt.savefig(output, bbox_inches='tight', dpi=450)
