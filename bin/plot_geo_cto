#!/usr/bin/env python3
'''Plot geographical distribution of cloud type occurrence.

Usage: plot_geo_cto INPUT ECS OUTPUT [OPTIONS]

This program uses PST for command line argument parsing.

Arguments:

  INPUT   Input directory. The output of calc_geo_cto (NetCDF).
  ECS     ECS file (CSV).
  OUTPUT  Output plot (PDF).

Options:

  degree: VALUE      Degree. One of: 0 (absolute value) or 1 (trend). Default: 0.
  relative: VALUE    Plot relative to CERES. One of: true or false. Default: true.
  normalized: VALUE  Plot normaized CERES. One of: true, false, only.  Default: false.
  with_ref: VALUE    Plot reference row. One of: true, false. Default: true.

Examples:

bin/plot_geo_cto data/geo_cto/historical/part_1 input/ecs/ecs.csv plot/geo_cto_historical_1.png
bin/plot_geo_cto data/geo_cto/historical/part_2 input/ecs/ecs.csv plot/geo_cto_historical_2.png
'''

import sys
import copy
import os
import string
import re
import numpy as np
import ds_format as ds
import matplotlib.pyplot as plt
import matplotlib as mpl
import cartopy.crs as ccrs
import pst
import pandas as pd

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

REGIONS = {
	'NE': [0, 90, 0, 180],
	'NW': [0, 90, -180, 0],
	'SE': [-90, 0, 0, 180],
	'SW': [-90, 0, -180, 0],
	'NA': [15, 45, -60, -30],
	'EA': [30, 60, 90, 120],
	'OC': [-45, -15, 150, 180],
	'SA': [-30, 0, -75, -45],
}

CLOUD_TYPES0 = ['High', 'Middle', 'Cumuliform', 'Stratiform']
CLOUD_TYPES1 = ['Ci', 'Cs', 'Cc', 'As', 'Ac', 'Cu', 'Sc', 'St', 'Cu+Sc', 'Cb']
CLOUD_TYPES2 = [
	'Cirrus fibratus/uncinus (H1)',
	'Cirrus spissatus (H2)',
	'Cirrus spissatus\ncumulonimbogenitus (H3)',
	'Cirrus fibratus/uncinus (H4)',
	'Cirrus/cirrostratus (H5)',
	'Cirrus/cirrostratus (H6)',
	'Cirrostratus whole sky (H7)',
	'Cirrostratus\nnot whole sky (H8)',
	'Cirrocumulus (H9)',
	'Cumulonimbus\ncapillatus (M1)',
	'Altostratus\nopacus/nimbostratus (M2)',
	'Altocumulus\ntranslucidus\nsingle level (M3)',
	'Altocumulus\ntranslucidus patches (M4)',
	'Altocumulus\ntranslucidus bands (M5)',
	'Altocumulus\ncumulogenitus (M6)',
	'Altocumulus\ntranslucidus/opacus (M7)',
	'Altocumulus\ncastellanus/floccus (M8)',
	'Altocumulus\nchaotic sky (M9)',
	'Cumulus\nhumilis/fractus (L1)',
	'Cumulus\nmediocris/congestus (L2)',
	'Cumulonimbus calvus (L3)',
	'Stratocumulus\ncumulogenitus (L4)',
	'Stratocumulus (L5)',
	'Stratus\nnebulosus/fractus (L6)',
	'Stratus/cumulus fractus (L7)',
	'Cumulus\nand stratocumulus (L8)',
	'Cumulonimbus capillatus (L9)',
]

LEVELS_NORM = 100.*np.arange(0, 1.025, 0.025)
NTICKS_NORM = 11

LEVELS_ABS = {
	0: {
		4: 100.*np.arange(0, 1.025, 0.025),
		10: 100.*np.arange(0, 1.025, 0.025),
		27: 100.*np.arange(0, 0.825, 0.025),
	},
	1: {
		4: 100.*np.arange(-0.10, 0.105, 0.005),
		10: 100.*np.arange(-0.05, 0.055, 0.005),
		27: 100.*np.arange(-0.03, 0.031, 0.001),
	},
}
NTICKS_ABS = {
	0: { 4: 11, 10: 11, 27: 11 },
	1: { 4: 11, 10: 11, 27: 11 },
}

LEVELS_REL = {
	0: {
		4: 100.*np.arange(-0.6, 0.625, 0.025),
		10: 100.*np.arange(-0.50, 0.525, 0.025),
		27: 100.*np.arange(-0.50, 0.525, 0.025),
	},
	1: {
		4: 100.*np.arange(-0.025, 0.026, 0.001),
		10: 100.*np.arange(-0.025, 0.026, 0.001),
		27: 100.*np.arange(-0.025, 0.026, 0.001),
	},
}
NTICKS_REL = {
	0: { 4: 13, 10: 13, 27: 13 },
	1: { 4: 13, 10: 13, 27: 13 },
}

REF_LEVELS = 100.*np.arange(0, 1.025, 0.025)

CB_SIZE = 1.6
CB_SPACE = 0.2

def read_ecs(filename):
	d = pd.read_csv(filename)
	return {
		'model': np.array(d['Model']),
		'ecs': np.array(d['ECS']),
		'tcr': np.array(d['TCR']),
		'cld': np.array(d['CLD']),
		'ext_ecs': np.array(d['Extended_ECS']),
		'ext_tcr': np.array(d['Extended_TCR']),
		'ext_cld': np.array(d['Extended_CLD']),
		'.': {
			'model': {'.dims': ['model']},
			'ecs': {'.dims': ['model']},
			'tcr': {'.dims': ['model']},
			'cld': {'.dims': ['model']},
			'ext_scs': {'.dims': ['model']},
			'ext_tcr': {'.dims': ['model']},
			'ext_cld': {'.dims': ['model']},
		}
	}

def get_ecs(d_ecs, var, model):
	try:
		i = np.where(d_ecs['model'] == model)[0][0]
		return d_ecs[var][i], (d_ecs['ext_'+var][i] == 'Y')
	except IndexError:
		return np.nan, False

def plot_letter(i, j, color):
	plt.text(0.01, 0.98, '(%s%d)' % (string.ascii_lowercase[i], j+1),
		transform=ax.transAxes,
		va='top',
		ha='left',
		fontsize=8,
		weight='bold',
		color=color,
	)

def plot_label(label, where, color='k'):
	x = {
		'left': 0.02,
		'center': 0.5,
		'right': 0.98,
	}[where]
	ax.text(x, 0.02, label,
		transform=ax.transAxes,
		fontsize=8,
		ha=where,
		va='bottom',
		weight='bold',
		color=color,
	)

def plot_box(x):
	plt.gca().add_patch(mpl.patches.Rectangle(
		[x[2], x[0]],
		x[3] - x[2],
		x[1] - x[0],
		fill=False,
		lw=0.5,
		color='red',
		clip_on=False,
		zorder=3,
	))

def calc_mean_mse(x, lat, lon, ext=None):
	latg, long_ = np.meshgrid(lat, lon)
	latg = latg.T
	long_ = long_.T
	weights = np.cos(latg/180.*np.pi)
	mask = np.isnan(x)
	weights[mask] = 0
	if ext is not None:
		mask = (latg  >= ext[0]) & (latg  < ext[1]) & \
		       (long_ >= ext[2]) & (long_ < ext[3])
		weights[~mask] = 0
	weights /= np.sum(weights)
	mean = np.nansum(x*weights)
	mse = np.nansum(weights*x**2)
	return mean, mse

def plot_colorbars(colorbars):
	w, h = plt.gcf().get_size_inches()
	n = len(colorbars)
	size = CB_SIZE
	space = CB_SPACE
	total_size = size*n + space*(n - 1)
	x = h/2 + np.arange(n)[::-1]*(size + space) - total_size/2 - 0.2
	for i, cb in enumerate(colorbars):
		cax = fig.add_axes([1 - 0.6/w, x[i]/h, 0.07/w, size/h])
		norm = mpl.colors.Normalize(
			vmin=cb['levels'][0],
			vmax=cb['levels'][-1]
		)
		sm = mpl.cm.ScalarMappable(norm=norm, cmap=cb['cmap'])
		obj = fig.colorbar(sm,
			cax=cax,
			ticks=np.linspace(cb['levels'][0], cb['levels'][-1], cb['nticks']),
			orientation='vertical',
			extend=('both' if cb.get('extend') else 'neither'),
		)
		obj.set_label(label=cb['label'], fontsize=8)
		obj.ax.tick_params(labelsize=8)

if __name__ == '__main__':
	args, opts = pst.decode_argv(sys.argv, as_unicode=True)
	if len(args) != 4:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = args[1]
	ecs = args[2]
	output = args[3]
	degree = opts.get('degree', 0)
	relative = opts.get('relative', True)
	normalized = opts.get('normalized', False)
	with_ref = opts.get('with_ref', True)

	var = {
		0: 'cloud_occurrence',
		1: 'cloud_occurrence_tas',
	}[degree]

	units = {
		0: '%',
		1: '%K$^{-1}$',
	}[degree]

	print('<- %s' % input_)
	dd = ds.readdir(input_, [var, 'lon', 'lat'])
	print('<- %s' % ecs)
	d_ecs = read_ecs(ecs)

	nclasses = ds.dim(dd[0], 'cloud_type')

	levels_norm = LEVELS_NORM
	levels_abs = LEVELS_ABS[degree][nclasses]
	levels_rel = LEVELS_REL[degree][nclasses]
	nticks_norm = NTICKS_NORM
	nticks_abs = NTICKS_ABS[degree][nclasses]
	nticks_rel = NTICKS_REL[degree][nclasses]

	cb_label = 'Cloud type occurrence'
	if degree == 1:
		cb_label += ' trend'

	cloud_types = {
		4: CLOUD_TYPES0,
		10: CLOUD_TYPES1,
		27: CLOUD_TYPES2,
	}[nclasses]

	d_ref = None
	for i, d in enumerate(dd):
		name = os.path.basename(d['filename'])[:-3]
		d['name'] = name
		m = re.match('\d+_xval_(.*)', d['name'])
		if m is not None:
			d['name'] = m.groups()[0]
		d['ecs'], d['ext'] = get_ecs(d_ecs, 'ecs', name)
		if d['name'] in ('CERES', 'all'):
			d['order'] = -2
		elif name == 'IDD':
			d['order'] = -1
		elif np.isnan(d['ecs']):
			d['order'] = np.inf
		else:
			d['order'] = d['ecs']
		if d['name'] in ('CERES', 'all'):
			d_ref = d
		if d == d_ref:
			d['type'] = 'ref'
		elif name in ('IDD',):
			d['type'] = 'idd'
		else:
			d['type'] = 'other'

	dd.sort(key=lambda d: d['order'])

	normf = np.full(nclasses, np.nan, np.float64)
	if d_ref is not None:
		for j in range(nclasses):
			normf[j] = np.nanmax(d_ref[var][j,:,:])

	if d_ref is None:
		normalized = False
		relative = False

	ddx = []
	for d in dd:
		if d['type'] == 'ref' and not with_ref:
			continue
		dx = {}
		dx['name'] = d['name']
		dx['base_name'] = d['name']
		dx['x'] = d[var]*100
		ext = None
		if relative and d['type'] == 'other':
			ext = REGIONS.get(dx['base_name'])
			dx['x'] -= d_ref[var]*100
			dx['mse'] = np.array([
				calc_mean_mse(dx['x'][i], d['lat'], d['lon'], ext)[1]
				for i in range(nclasses)
			])
			dx['tmse'] = np.mean(dx['mse'])
		dx['mean'] = np.array([
			calc_mean_mse(dx['x'][i], d['lat'], d['lon'], ext)[0]
			for i in range(nclasses)
		])
		dx['lat'] = d['lat']
		dx['lon'] = d['lon']
		dx['ecs'] = d['ecs']
		dx['ext'] = d['ext']
		dx['type'] = d['type']
		ddx += [dx]
		if normalized and not (relative and d['type'] == 'other'):
			dx = {}
			dx['name'] = d['name'] + ' (normalised)'
			dx['base_name'] = d['name']
			dx['x'] = d[var].copy()*100
			for j in range(nclasses):
				dx['x'][j] /= normf[j]
			dx['lat'] = d['lat']
			dx['lon'] = d['lon']
			dx['ecs'] = d['ecs']
			dx['ext'] = d['ext']
			dx['type'] = d['type']
			dx['normalized'] = True
			ddx += [dx]

	nrows = len(ddx)
	ncols = nclasses

	w = 1.5*ncols + 1.8
	h = 0.75*nrows + 0.6
	fig = plt.figure(figsize=(w, h))
	plt.subplots_adjust(
		hspace=0,
		wspace=0,
		left=1.1/w,
		right=1-0.7/w,
		top=1-0.5/h,
		bottom=0.1/h,
	)

	for i, d in enumerate(ddx):
		label = d['name']
		if np.isfinite(d['ecs']):
			star = '$^*$' if d['ext'] else ''
			label += '\nECS %.1f K%s' % (d['ecs'], star)
		total_mse = 0
		ax1 = None
		for j, cloud_type in enumerate(cloud_types):
			ax = fig.add_subplot(nrows, ncols, i*ncols + j + 1,
				projection=ccrs.PlateCarree())
			ax.outline_patch.set_linewidth(0.2)
			if i == 0:
				ax.text(0.5, 1.05, cloud_type,
					transform=ax.transAxes,
					va='bottom',
					ha='center',
					fontsize=8,
				)
			if j == 0: ax1 = ax
			color = 'white' \
				if d['name'].startswith(('CERES', 'all')) or \
				d['type'] == 'other' and not relative and degree == 0 \
				else 'k'
			plot_letter(i, j, color=color)
			levels = levels_rel if relative and d['type'] == 'other' \
				else levels_abs
			cmap = 'bwr' if relative and d['type'] == 'other' or degree == 1 \
				else 'viridis'
			extend = 'neighter' \
				if degree == 0 and not d.get('normalized', False) \
				else 'both'

			if d['type'] == 'idd':
				obj = ax.imshow(d['x'][j],
					extent=(-180, 180, -90, 90),
					cmap=cmap,
					origin='lower',
					interpolation='nearest',
					vmin=levels[0],
					vmax=levels[-1],
				)
			else:
				obj = ax.contourf(d['lon'], d['lat'], d['x'][j],
					levels=levels,
					cmap=cmap,
					extend=extend,
				)
			if d['base_name'] in REGIONS:
				extent = REGIONS[d['base_name']]
				plot_box(extent)

			if relative and d['type'] == 'other':
				if 'mean' in d:
					plot_label('%.0f%%' % d['mean'][j], 'left', color)
				if 'mse' in d:
					plot_label('%.0f%%' % np.sqrt(d['mse'][j]), 'right', color)
			elif degree == 1:
				if 'mean' in d:
					plot_label('%.2f' % d['mean'][j], 'center', color)
			else:
				if 'mean' in d:
					plot_label('%d%s' % (d['mean'][j], units), 'center', color)

			ax.coastlines(lw=0.4)

		if d['type'] == 'other' and relative:
			if 'tmse' in d:
				label += '\nTotal RMSE %.1f%%' % np.sqrt(d['tmse'])
		ax1.text(-0.02, 0.5, label,
			transform=ax1.transAxes, va='center', ha='right',
			fontsize=8,
		)

	colorbars = []
	if with_ref:
		colorbars += [{
			'cmap': ('viridis' if degree == 0 else 'bwr'),
			'label': '%s (%s)' % (cb_label, units),
			'levels': levels_abs,
			'nticks': nticks_abs,
			'extend': ('neither' if degree == 0 else 'both'),
		}]
	if normalized:
		colorbars += [{
			'cmap': 'viridis',
			'label': 'Normalised %s (%s)' % (cb_label.lower(), units),
			'levels': levels_norm,
			'nticks': nticks_norm,
			'extend': 'both',
		}]
	if relative:
		colorbars += [{
			'cmap': 'bwr',
			'label': '%s error (%s)' % (cb_label, units),
			'levels': levels_rel,
			'nticks': nticks_rel,
			'extend': 'both',
		}]
	plot_colorbars(colorbars)

	print('-> %s' % output)
	plt.savefig(output,
		bbox_inches='tight',
		dpi=280,
		pad_inches=(0 if output.endswith('.pdf') else None),
	)
